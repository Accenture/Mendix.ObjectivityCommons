// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package objectivitycommons.proxies;

/**
 * Multi-purpose container for string values.
 * Value: main attribute: the value is kept here.
 * Index: optional: may be used for indexed values (see StringSplit).
 * Key: optional: may be used for key/values pairs (see JSON_Object_GetKeyValuePairs).
 */
public class KeyValue extends objectivitycommons.proxies.StringValue
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "ObjectivityCommons.KeyValue";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Key("Key"),
		Index("Index"),
		Value("Value"),
		ParentChildren("ObjectivityCommons.ParentChildren");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public KeyValue(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected KeyValue(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject keyValueMendixObject)
	{
		super(context, keyValueMendixObject);
		if (!com.mendix.core.Core.isSubClassOf(entityName, keyValueMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	
	}

	/**
	 * @deprecated Use 'KeyValue.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static objectivitycommons.proxies.KeyValue initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return objectivitycommons.proxies.KeyValue.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static objectivitycommons.proxies.KeyValue initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new objectivitycommons.proxies.KeyValue(context, mendixObject);
	}

	public static objectivitycommons.proxies.KeyValue load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return objectivitycommons.proxies.KeyValue.initialize(context, mendixObject);
	}

	/**
	 * @return value of Key
	 */
	public final java.lang.String getKey()
	{
		return getKey(getContext());
	}

	/**
	 * @param context
	 * @return value of Key
	 */
	public final java.lang.String getKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Key.toString());
	}

	/**
	 * Set value of Key
	 * @param key
	 */
	public final void setKey(java.lang.String key)
	{
		setKey(getContext(), key);
	}

	/**
	 * Set value of Key
	 * @param context
	 * @param key
	 */
	public final void setKey(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String key)
	{
		getMendixObject().setValue(context, MemberNames.Key.toString(), key);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of ParentChildren
	 */
	public final objectivitycommons.proxies.KeyValueContainer getParentChildren() throws com.mendix.core.CoreException
	{
		return getParentChildren(getContext());
	}

	/**
	 * @param context
	 * @return value of ParentChildren
	 * @throws com.mendix.core.CoreException
	 */
	public final objectivitycommons.proxies.KeyValueContainer getParentChildren(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		objectivitycommons.proxies.KeyValueContainer result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ParentChildren.toString());
		if (identifier != null) {
			result = objectivitycommons.proxies.KeyValueContainer.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of ParentChildren
	 * @param parentchildren
	 */
	public final void setParentChildren(objectivitycommons.proxies.KeyValueContainer parentchildren)
	{
		setParentChildren(getContext(), parentchildren);
	}

	/**
	 * Set value of ParentChildren
	 * @param context
	 * @param parentchildren
	 */
	public final void setParentChildren(com.mendix.systemwideinterfaces.core.IContext context, objectivitycommons.proxies.KeyValueContainer parentchildren)
	{
		if (parentchildren == null) {
			getMendixObject().setValue(context, MemberNames.ParentChildren.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.ParentChildren.toString(), parentchildren.getMendixObject().getId());
		}
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final objectivitycommons.proxies.KeyValue that = (objectivitycommons.proxies.KeyValue) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return entityName;
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Override
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
