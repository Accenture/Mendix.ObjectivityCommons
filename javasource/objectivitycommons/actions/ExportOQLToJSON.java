// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectivitycommons.actions;

import java.util.Date;
import java.util.Map.Entry;
import java.util.Optional;
import java.text.SimpleDateFormat;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataColumnSchema;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTableSchema;
import com.mendix.systemwideinterfaces.connectionbus.requests.IParameterMap;
import com.mendix.systemwideinterfaces.connectionbus.requests.IRetrievalSchema;
import com.mendix.systemwideinterfaces.connectionbus.requests.types.IOQLTextGetRequest;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import oql.implementation.OQL;

/**
 * Similiar to ExecuteOQLStatement, but returns data serialized in JSON format.
 */
public class ExportOQLToJSON extends CustomJavaAction<java.lang.String>
{
	private java.lang.String statement;
	private java.lang.Boolean preserveParameters;
	private java.lang.Long amount;
	private java.lang.Long offset;
	private java.lang.String dateTimeFormat;

	public ExportOQLToJSON(IContext context, java.lang.String statement, java.lang.Boolean preserveParameters, java.lang.Long amount, java.lang.Long offset, java.lang.String dateTimeFormat)
	{
		super(context);
		this.statement = statement;
		this.preserveParameters = preserveParameters;
		this.amount = amount;
		this.offset = offset;
		this.dateTimeFormat = dateTimeFormat;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		String dtFormat = Optional.ofNullable(this.dateTimeFormat).orElse("");
		ILogNode logger = Core.getLogger(this.getClass().getSimpleName());
		StringBuilder _json = new StringBuilder();

		boolean fetchAll = amount == null || amount == 0;
		final long PAGE_SIZE = amount != null ? amount : 10000;
		long PAGE_OFFSET = offset != null ? offset : 0;

		boolean firstRow = true;
		while(true) {
			logger.debug("Executing query amount/offset: " + PAGE_SIZE + "/" + PAGE_OFFSET);

			IContext context = getContext().createSudoClone();
			IDataTable results = Core.retrieveOQLDataTable(context, buildRequest(PAGE_OFFSET, PAGE_SIZE));

			IDataTableSchema tableSchema = results.getSchema();
			int colsCount = tableSchema.getColumnCount();

			String[] headers = new String[colsCount];
			int index = 0;
			for (IDataColumnSchema columnSchema : tableSchema.getColumnSchemas()) {
				headers[index] = columnSchema.getName();
				index++;
			}

			_json.append("[");

			for (IDataRow row : results.getRows()) {

				if (!firstRow) {
					_json.append(",");
				}
				firstRow = false;
				_json.append("{");

				for (int i = 0; i < colsCount; i++) {

					if (i > 0) {
						_json.append(",");
					}
					_json.append("\"");
					_json.append(headers[i]);
					_json.append("\":");

					Object value = row.getValue(getContext(), i);
					boolean quote = false;
					if (value == null) {
						value = "null";
					} else if (value instanceof IMendixIdentifier) {
						value = Long.toString(((IMendixIdentifier) value).toLong());
					} else if (value instanceof Date) {
						value = dtFormat.isEmpty()
							? value.toString()
							: new SimpleDateFormat(dtFormat).format((Date) value);
						quote = true;
					} else if (value instanceof String) {
						quote = true;
					}

					if (quote) {
						_json.append("\"");
						_json.append(value
							.toString()
							.replace("\\", "\\\\")
							.replace("\"", "\\\"")
						);
						_json.append("\"");
					} else {
						_json.append(value);
					}
				}

				_json.append("}");
			}

			if (!fetchAll || results.getRowCount() != PAGE_SIZE) {
				break;
			}
			results.getRows().clear();
			PAGE_OFFSET += PAGE_SIZE;
		}

		if (!this.preserveParameters) 
			OQL.resetParameters();

		_json.append("]");
		return _json.toString();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExportOQLToJSON";
	}

	// BEGIN EXTRA CODE
	private IOQLTextGetRequest buildRequest(long offset, long pagesize) {
		IOQLTextGetRequest request = Core.createOQLTextGetRequest();
		request.setQuery(statement);
		IParameterMap parameterMap = request.createParameterMap();
		IRetrievalSchema schema = Core.createRetrievalSchema();
		schema.setAmount(pagesize);
		schema.setOffset(offset);
		request.setRetrievalSchema(schema);
		for (Entry<String, Object> entry : OQL.getNextParameters().entrySet()) {
			parameterMap.put(entry.getKey(), entry.getValue());
		}
		request.setParameters(parameterMap);
		return request;
	}
	// END EXTRA CODE
}
