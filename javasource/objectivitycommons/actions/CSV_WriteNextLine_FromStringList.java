// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectivitycommons.actions;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import com.mendix.webui.CustomJavaAction;
import com.opencsv.CSVWriter;
import csv.impl.CSV;
import objectivitycommons.proxies.StringValue;

/**
 * An alternative for WriteNextLine from CSV module.
 * This one is more dynamic:
 * doesn't require declaring an entity with columns mapped as attributes.
 * 
 * Writes all values from the List of StringDTO as column values of CSV row.
 * This action should only be invoked from the microflow used by a ExportCSV action.
 */
public class CSV_WriteNextLine_FromStringList extends CustomJavaAction<java.lang.Void>
{
	private java.util.List<IMendixObject> __Line;
	private java.util.List<objectivitycommons.proxies.KeyValue> Line;

	public CSV_WriteNextLine_FromStringList(IContext context, java.util.List<IMendixObject> Line)
	{
		super(context);
		this.__Line = Line;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.Line = java.util.Optional.ofNullable(this.__Line)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__LineElement -> objectivitycommons.proxies.KeyValue.initialize(getContext(), __LineElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE

		/*
		 * Begin and end below is a copy from the original code - except of section marked with //OBJ-REPLACEMENT
		 */
		ILogNode logger = CSV.getLogger();
		Object contextObj = getContext().getData().get(CSV.CONTEXT_WRITER_OBJ);
		if (contextObj == null || !(contextObj instanceof CSVWriter)) {
			throw new CoreException("Reader not found, this action should be invoked from a Export CSV microflow.");
		}
		
		@SuppressWarnings("resource") // reader is closed by the ImportCSV action
		CSVWriter writer = (CSVWriter) contextObj;

		//OBJ-REPLACEMENT
		String[] csvLine = new String[Line.size()];
		int offset = 0;
		for (StringValue obj : Line) {
			csvLine[offset] = obj.getValue();
			offset++;
		}

		writer.writeNext(csvLine);
		logger.trace("Written line to CSV.");
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CSV_WriteNextLine_FromStringList";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
