// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectivitycommons.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.javaactions.parameters.ITemplateParameter;
import com.mendix.webui.CustomJavaAction;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Action created based on https://docs.mendix.com/howto/extensibility/howto-datastorage-api/#5-retrieving-objects-using-sql
 * 
 * Allows execution of SQL Select statement in order to return MxObjects.
 * First column from select statement must contain GUID of mendix object.
 * 
 * Warning: the action does not check if FROM clause is the same object type as returned by the action
 */
public class ExecuteSQLStatement extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Sql;
	private java.lang.String ResultEntity;

	public ExecuteSQLStatement(IContext context, com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Sql, java.lang.String ResultEntity)
	{
		super(context);
		this.Sql = Sql;
		this.ResultEntity = ResultEntity;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		logger.debug("executeAction: " + this.Sql);
		IContext ct = this.getContext();
        List<IMendixObject> resultList = null;
        resultList = Core.dataStorage().executeWithConnection(connection ->
        {
			List<IMendixIdentifier> identifiers = new ArrayList<IMendixIdentifier>();
            try {
			
				// --- sql
				List<ITemplateParameter> pars = this.Sql.getParameters();
				String xp = this.Sql.replacePlaceholders((placeholder, idx) -> {
					ITemplateParameter par = pars.get(idx - 1);
					Object value = par.getValue();
					if (value == null) return "NULL";
					String val = value.toString();
					switch (par.getParameterType()) {
							case STRING: return String.format("'%s'", val.replace("'", "&apos;"));
							case BOOLEAN: return String.format("%s()", val);
							case DATETIME: return String.valueOf(((Date)value).getTime());
							default: return val;
						}
				});

			
                PreparedStatement stmt = connection.prepareStatement(xp);
                ResultSet rset = stmt.executeQuery();
                ResultSetMetaData rmd = rset.getMetaData();
                int colCount = rmd.getColumnCount();
                while(rset.next()){
					String identifier = rset.getObject(1).toString();
					IMendixIdentifier idObject = Core.createMendixIdentifier(identifier);
					identifiers.add(idObject);
                    //logger.debug(String.format("Created i %s", obj));
                }
            } catch (SQLException e) {
                logger.error("Failed to execute sql statement: " + e.getMessage());
                throw new MendixRuntimeException(e);
            }
			
			identifiers = identifiers.stream()
			.distinct()
			.collect(Collectors.toList());
			try{
				return Core.retrieveIdList(ct, identifiers);	
			}catch(CoreException e){
				logger.error("Failed to retrieve objects: " + e.getMessage());
                throw new MendixRuntimeException(e);
			}
            //return result;
        });
        return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteSQLStatement";
	}

	// BEGIN EXTRA CODE
	private final ILogNode logger = Core.getLogger(this.getClass().getName());
	// END EXTRA CODE
}
