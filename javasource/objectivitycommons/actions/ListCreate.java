// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectivitycommons.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import objectivitycommons.proxies.ValueVM;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.ArrayList;

/**
 * Source: https://docs.mendix.com/howto/extensibility/howto-connector-kit#3-executing-microflows
 */
public class ListCreate extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String ResultEntity;
	private java.lang.Long ListSize;
	private java.lang.String InitializationMicroflow;
	private IMendixObject ContextObject;

	public ListCreate(IContext context, java.lang.String ResultEntity, java.lang.Long ListSize, java.lang.String InitializationMicroflow, IMendixObject ContextObject)
	{
		super(context);
		this.ResultEntity = ResultEntity;
		this.ListSize = ListSize;
		this.InitializationMicroflow = InitializationMicroflow;
		this.ContextObject = ContextObject;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
        logger.debug(String.format("Creating list of %d %s objects, initialized by %s",
                this.ListSize, this.ResultEntity, this.InitializationMicroflow));
        ArrayList<IMendixObject> resultList = new ArrayList<IMendixObject>();
		IContext ctx = this.getContext();
        for (int i = 0; i < this.ListSize; i = i + 1) {
            IMendixObject newObject = Core.instantiate(getContext(), this.ResultEntity);
            resultList.add(newObject);

            // run the specified initialization microflow
			ValueVM vm = new ValueVM(ctx);
			vm.setInteger(i);
            Core.execute(ctx, this.InitializationMicroflow, newObject, vm.getMendixObject(), this.ContextObject);
		}
        return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ListCreate";
	}

	// BEGIN EXTRA CODE
	private static final ILogNode logger = Core.getLogger(ListCreate.class.getName());
	// END EXTRA CODE
}
