// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectivitycommons.actions;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.javaactions.parameters.ITemplateParameter;

/**
 * Similar to normal Retrieve (from DB) activity, enhanced with:
 *  - Simplified Pagination
 *  - Dynamic Sorting.
 * 
 * Pagination:
 * ------------------------------
 * Simplified compared to normal Retrieve: using higher level concept of PageNumber instead of Offset (number of rows to skip).
 * Low-level Offset is calulated intenally as: max(0, (PageNumber - 1) * PageSize)
 * 
 * Sorting:
 * ------------------------------
 * Format: comma separated list (with optional spaces) of pairs: AttributeName: ASC/DESC
 * For associations use full path, e.g: System.changedBy/System.User/Name
 * Example: Name: ASC, changedDate: DESC, System.changedBy/System.User/Name: ASC
 * 
 * XPath:
 * ------------------------------
 * Write it as for normal Retrieve, but change variables into params.
 * No quoting required for param values (will be added automatically).
 * Example: normal Retrieve XPath:
 * 
 *   [contains(Name, $ContextVM/SearchName)]
 *   [Number >= $ContextVM/SearchNumber]
 *   [$ContextVM/SearchCategory = empty or Category = $ContextVM/SearchCategory]
 *   [$ContextVM/SearchChangedDate = empty or changedDate >= $ContextVM/SearchChangedDate]
 *   [not($ContextVM/SearchChangedByAdmin) or System.changedBy/System.User/System.UserRoles = '[%UserRole_Administrator%]']
 *   [not($ContextVM/SearchChangedByCurrentUser) or System.changedBy='[%CurrentUser%]']
 * 
 * Enhanced Retrieve XPath:
 * 
 *   [contains(Name, {1})]
 *   [Number >= {2}]
 *   [{3} = empty or Category = {3}]
 *   [{4} = empty or changedDate >= {4}]
 *   [not({5}) or System.changedBy/System.User/System.UserRoles = '[%UserRole_Administrator%]']
 *   [not({6}) or System.changedBy = '[%CurrentUser%]']
 * 
 * The params are simply corresponding field values, e.g. $ContextVM/SearchName for {1}.
 * 
 * Supported param types are restricted to: String, Int, Decimal, DateTime and Bool.
 * So e.g. for ENUMS use this trick to convert it to String (for param {3} in our example):
 * 
 *   if $ContextVM/SearchCategory = empty then empty
 *   else toString($ContextVM/SearchCategory)
 * 
 * SINCE VERSION 9.6.2:
 * NOTICE: If you plan to create Xpath within microflow and pass complete verbatim string, use XpathString param instead. Since all params are required, set Xpath param to NULL if you want to use XpathString.
 */
public class RetrieveEnhancedWithTotalRows extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String Entity;
	private java.lang.Long PageNumber;
	private java.lang.Long PageSize;
	private IMendixObject __TotalRowsDTO;
	private objectivitycommons.proxies.NumericValue TotalRowsDTO;
	private com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Xpath;
	private java.lang.String XpathString;
	private com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Sorting;

	public RetrieveEnhancedWithTotalRows(IContext context, java.lang.String Entity, java.lang.Long PageNumber, java.lang.Long PageSize, IMendixObject TotalRowsDTO, com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Xpath, java.lang.String XpathString, com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Sorting)
	{
		super(context);
		this.Entity = Entity;
		this.PageNumber = PageNumber;
		this.PageSize = PageSize;
		this.__TotalRowsDTO = TotalRowsDTO;
		this.Xpath = Xpath;
		this.XpathString = XpathString;
		this.Sorting = Sorting;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.TotalRowsDTO = this.__TotalRowsDTO == null ? null : objectivitycommons.proxies.NumericValue.initialize(getContext(), __TotalRowsDTO);

		// BEGIN USER CODE
		// --- sorting
		String sort = Sorting.toString().trim();
		if(sort.isEmpty()) throw new MendixRuntimeException("Sorting cannot be empty");

		Map<java.lang.String,java.lang.String> sortMap = new HashMap<String,String>();
		String[] pairs = sort.split(",");
		for (String pair : pairs) {
			String[] parts = pair.trim().split(":");
			if (parts.length >= 2) {
				sortMap.put(parts[0].trim(), parts[1].trim());
			}
		}

		// --- xpath
		List<ITemplateParameter> pars = Xpath.getParameters();
		String xp;
		if (XpathString == null) {
		xp = Xpath.replacePlaceholders((placeholder, idx) -> {
			ITemplateParameter par = pars.get(idx - 1);
			Object value = par.getValue();
			if (value == null) return "NULL";
			String val = value.toString();
			switch (par.getParameterType()) {
				case STRING: return String.format("'%s'", val.replace("'", "&apos;"));
				case BOOLEAN: return String.format("%s()", val);
				case DATETIME: return String.valueOf(((Date)value).getTime());
				default: return val;
			}
		});
		} else {
			xp = XpathString;
		}
		xp = String.format("//%s %s", Entity, xp);

		// --- pagination
		int amount = (int) Math.max(1, PageSize);
		int offset = (int) Math.max(0, (PageNumber - 1) * PageSize);

		// --- call and return
		IContext ctx = getContext();

        logger.debug(String.format("Calling retrieveXPathQuery: amount=%d; offset=%d; xpath:%s; sort: %s",
			amount, offset, xp, sortMap.toString()));
		List<IMendixObject> resultList = Core.retrieveXPathQuery(
			ctx,
			xp,
			amount,
			offset,
			sortMap);

		// --- total rows
		if (TotalRowsDTO != null) {
			String xpTotalRows = String.format("COUNT(%s)", xp);
			logger.debug(String.format("Calling retrieveXPathQueryAggregate for total rows: xpath:%s", xpTotalRows));
			Long totalrows = Core.retrieveXPathQueryAggregate(ctx, xpTotalRows);
			TotalRowsDTO.setValue(totalrows);
		}

		return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RetrieveEnhancedWithTotalRows";
	}

	// BEGIN EXTRA CODE
	private static final ILogNode logger = Core.getLogger(RetrieveEnhanced.class.getName());
	// END EXTRA CODE
}
