// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package csv.actions;

import java.util.Arrays;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import com.mendix.webui.CustomJavaAction;
import com.opencsv.CSVWriter;
import csv.impl.CSV;

/**
 * Writes a line from a CSV.
 * This action should only be invoked from the microflow used by a ExportCSV action.
 * If the action returns an empty object, the end of the file is reached.
 * 
 * Take into account that the order of attributes filled of an entity will be ordered in alphabetical manner.
 * An example usable entity layout would be:
 * C01_Column1
 * C02_Column2
 * ...
 * 
 * All attributes should be of the type String; thus specific parsing should be part of the microflow.
 * 
 * This is implemented because declared primitives are returned in a different order than declared within the model.
 */
public class WriteNextLine extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String entity;
	private IMendixObject line;

	public WriteNextLine(IContext context, java.lang.String entity, IMendixObject line)
	{
		super(context);
		this.entity = entity;
		this.line = line;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode logger = CSV.getLogger();
		Object contextObj = getContext().getData().get(CSV.CONTEXT_WRITER_OBJ);
		if (contextObj == null || !(contextObj instanceof CSVWriter)) {
			throw new CoreException("Reader not found, this action should be invoked from a Export CSV microflow.");
		}
		
		@SuppressWarnings("resource") // reader is closed by the ImportCSV action
		CSVWriter writer = (CSVWriter) contextObj;
		IMetaObject metaObject = line.getMetaObject();
		String[] csvLine = new String[metaObject.getDeclaredMetaPrimitives().size()];
		String[] attributes = new String[metaObject.getDeclaredMetaPrimitives().size()];
		int offset = 0;
		
		for (IMetaPrimitive primitive : metaObject.getDeclaredMetaPrimitives()) {
			attributes[offset] = primitive.getName();
			offset++;
		}
		Arrays.sort(attributes);
		
		for (offset = 0; offset < attributes.length; offset++) {
			Object value = line.getValue(getContext(), attributes[offset]);
			if (value != null) {
				csvLine[offset] = value.toString();
			} else {
				csvLine[offset] = null;
			}
		}
		writer.writeNext(csvLine);
		logger.trace("Written line to CSV.");
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "WriteNextLine";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
