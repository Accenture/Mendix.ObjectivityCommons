// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE

const btnOnClick = (button, ul) => {
    if(button.getAttribute("aria-expanded") === "true"){
        hideUl(button, ul);
    }
    else{
        showUl(button, ul);
    }
};

const showUl = (button, ul) => {
    ul.style.display="block";
    button.classList.add("focus");
    button.setAttribute("aria-expanded", true);
};

const hideUl = (button, ul) => {
    ul.style.display="none";
    button.classList.remove("focus");
    button.setAttribute("aria-expanded", false);
};

const aOnClick = (ul, button, option, span)=>{
    button.focus();
    setTimeout(()=>{
        hideUl(button, ul);
        option.selected=true;
        button.title = option.innerHTML;
        span.innerHTML = option.innerHTML;
    }, 100)
};


const focusout = (div, button, ul) => {
    if(!div.contains(document.activeElement)){
        ul.style.display="none";
        button.classList.remove("focus");
        div.classList.remove("open");
        button.setAttribute("aria-expanded", false);
    }
}

const createButton = (options) => {
    let button = document.createElement("button");
    button.className = options.className ? options.className : undefined;
    button.type = options.type ? options.type : undefined;
    if (options.title) button.title = options.title;
    if(options.dataToggle) button.setAttribute("data-toggle", options.dataToggle);
    if(options.ariaExpanded) button.setAttribute("aria-expanded", options.ariaExpanded);
    return button;
};

const createSpan = (options) => {
    let span = document.createElement("span");
    span.className = options.className ? options.className : undefined;
    if(options.innerHTML) span.innerHTML = options.innerHTML;
    return span;
};

const createUl = (options) => {
    let ul = document.createElement("ul");
    ul.className = options.className ? options.className : undefined;
    ul.tabIndex = "-1";
    ul.style.overflow = options.overflow ? options.overflow : undefined;
    ul.style.maxHeight = options.maxHeight ? options.maxHeight : undefined;
    return ul;
};

const createLi = (options) => {
    let li = document.createElement("li");
    li.className = options.className ? options.className : undefined;
    li.style.display = options.display ? options.display : undefined;
    return li;
}

const filterAction = (input, ul) => {
    var filter = input.value.toUpperCase();
    var lis = ul.getElementsByTagName('li'); //check if ul.children wouldn't be better
    for (var i = 0; i < lis.length; i++) {
        var labels = lis[i].getElementsByTagName('label');
        if (labels.length != 0) {
            var name = labels[0].innerHTML;
            if (name.toUpperCase().indexOf(filter) > -1)
                lis[i].style.display = 'block';
            else
                lis[i].style.display = 'none';
        }
    }
};

const createOptions = (options, ul, button, span) => {
    for(const option of options){
        let optionLi = createLi({className:"option"});

        let label = document.createElement('label');
        label.className="checkbox";
        label.innerHTML = option.innerHTML ? option.innerHTML : " ";
        let a = document.createElement("a");
        a.tabIndex="0";
        a.addEventListener("keydown", (e)=>{if(e.keyCode === 13){aOnClick(ul, button, option, span);}});
        a.addEventListener("pointerup", ()=>aOnClick(ul, button, option, span));
        a.appendChild(label);
        optionLi.appendChild(a);
        ul.appendChild(optionLi);
        if(option.selected){
            button.title = option.innerHTML;
            span.innerHTML = option.innerHTML;
        }
    }

}

const clearFilters = (button, span, defaultValue, input) => {
    if(button.title !== defaultValue){
        button.title = "";
        span.innerHTML = "";
        input.value = "";
    }
};


// END EXTRA CODE

/**
 * This action replaces all singleselect filters on all datagrid on the page it is placed on.
 * @returns {Promise.<void>}
 */
export async function JS_DataGrid_SingleSelectFilter() {
	// BEGIN USER CODE
    let nodes = document.querySelectorAll('.mx-datagrid');
    for(const node of nodes){
        let widget = dijit.byNode(node);
        if(widget._searchElements){
            for(const search of widget._searchElements){
                if(search._isSelect){
                    search.addOnLoad(() => {
                        let select = search.domNode.querySelector('select');
                        if(!select.parentElement.querySelector(".btn-group")){
                            let div = document.createElement("div");
                            div.className="btn-group";
                            let button =createButton({className:"mx-select-box multiselect singleselect dropdown-toggle form-control", type:"button", title:"", dataToggle:"dropdown", ariaExpanded:"false"});
                            let span = createSpan({className:"multiselect-selected-text singleselect-selected-text", innerHTML:""});
                            button.appendChild(span);
                            div.appendChild(button);
                            //create UL LI
                            let ul = createUl({className:"multiselect-container singleselect-container dropdown-menu pull-right", maxHeight:"200px", overflow:"hidden auto"});
                            ul.style.display='none';
                            let li = createLi({className:"multiselect-item filter", display:"block"});
                            ul.append(li);
                            //create input div
                            let inputDiv = document.createElement("div");
                            inputDiv.className = "input-group";
                            let inputSpan = createSpan({className:"input-group-addon"});
                            let inputI = document.createElement("i");
                            inputI.className="glyphicon glyphicon-search";
                            //create input
                            let input = document.createElement("input");
                            input.className = "form-control multiselect-search singleselect-search";
                            input.placeholder = "Search";
                            input.type="text";

                            let resetBtn = widget.resetButton.domNode;
                            resetBtn.addEventListener('click', ()=>{
                                clearFilters(button, span, search._defaultsValue, input);
                                filterAction(input, ul);
                            });

                            //create button clear
                            let buttonClearWrapper = document.createElement("span");
                            buttonClearWrapper.className = "input-group-btn";
                            let buttonClear = document.createElement("button");
                            buttonClear.tabIndex='-1';
                            buttonClear.className = "btn multiselect-clear-filter";
                            buttonClearWrapper.appendChild(buttonClear);
                            buttonClear.addEventListener("pointerup", (e)=>{
                                input.value="";
                                filterAction(input, ul);
                            });
                            inputSpan.appendChild(inputI);
                            inputDiv.appendChild(inputSpan);
                            inputDiv.appendChild(input);
                            inputDiv.append(buttonClearWrapper);

                            li.appendChild(inputDiv);

                            //add button action
                            button.addEventListener("pointerup", ()=>btnOnClick(button, ul));
                            button.addEventListener("keyup",  (e)=>{
                                if(e.keyCode === 40){showUl(button, ul)}
                                setTimeout(()=>{
                                    if(e.keyCode === 13){
                                        widget.searchButton.domNode.click();
                                    }
                                }, 200);
                            });

                            var options = select.querySelectorAll('option');
                            if(search.retriever === "" && options.length === 0){
                                var iteration = 0;
                                let interval = window.setInterval(()=>{
                                    if(iteration >= 150) window.clearInterval(interval);
                                    options = select.querySelectorAll('option');
                                    if(options.length != 0){
                                        createOptions(options, ul, button, span);
                                        window.clearInterval(interval);
                                    }
                                }, 100);
                            }
                            else{
                                createOptions(options, ul, button, span);
                            }
                            //add input filter action
                            input.onkeyup = () => {filterAction(input, ul, button)};

                            div.addEventListener('focusout', (event) => {
                                setTimeout(function(){focusout(div, button, ul)}, 100);
                            });
                            
                            div.appendChild(ul);
                            select.parentElement.appendChild(div);
                            select.style.display="none";
                        }
                    });
                }
                else if(search.widget.type && search.widget.type.includes('SelectBox')){
                    try{
                        let button = search.domNode.getElementsByTagName('button')[0];
                        button.addEventListener("keyup", (event) => {
                            setTimeout(()=>{
                                if(event.keyCode === 40){
                                    let multiselect = document.querySelector('.mx-dropdown.dropdown-menu');
                                    multiselect.querySelector('.form-control.multiselect-search').focus();
                                }
                                if(event.keyCode === 13){
                                    widget.searchButton.domNode.click();
                                }
                            }, 200);
                        });
                    }catch(e){console.error(e);}
                }
            }
        }
    }
	// END USER CODE
}
