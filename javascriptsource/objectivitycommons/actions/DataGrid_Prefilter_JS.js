// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
class OpenPrefiltered {
	prefilter(filters, gridName, setDefault) {

		const node = document.querySelector("." + gridName);
		let grid = dijit.registry.byNode(node);
		if (grid) {
			for (let i = 0; i < filters.length; i++) {

				let filterWidget = grid._searchElements.find((e) => { return e.searchInputName == filters[i].caption });
				if (filterWidget) {

					//input
					if (filters[i].type === "input") {
						filterWidget._input.value = filters[i].value;
					}
					//date time 
					else if (filters[i].type === "datetime") {
						// TODO  
					}
					//single select
					else if (filters[i].type === "select") {
						let options = filterWidget._input.children;
						for (let j = 0; j < options.length; j++) {
							if (options[j].innerText == filters[i].value) {
								options[j].selected = true;
								break;
							}
						}
					}
					//multi select
					else if (
						filters[i].type === "multiselect"
					) {
						if (setDefault) {
							filterWidget._defaultsValue = filters[i].value;
							filterWidget.defaults = filters[i].value;
						}
						else {
							filterWidget.addOnLoad(() => multiSelectPrefilter(filterWidget, filters[i]));
						}
					}
				}
			}
			if (setDefault) grid.resetButton.domNode.click();
			else grid.searchButton.domNode.click();
		}
	}
}

async function multiSelectPrefilter(filterNode, filterObject) {
	let interval;
	interval = setInterval(() => {
		let dropdown = filterNode._widget._dropDown;
		if (dropdown.children.length !== 0) {
			for (let j = 0; j < dropdown.children.length; j++) {
				let li = dropdown.children[j];
				if (filterObject.value.includes(li.getElementsByTagName('label')[0].textContent)) {
					filterNode._widget._selectItem(li);
				}
			}
			clearInterval(interval);
		}
	}, 100);
}
// END EXTRA CODE

/**
 * @param {MxObject[]} params
 * @param {string} gridName - DOM selector of data grid e.g. mx-name-datagrid0
 * @param {boolean} setDefault - If true, the filters will be set as default values. Grid reset button will revert values set by this action
 * @returns {Promise.<void>}
 */
export async function DataGrid_Prefilter_JS(params, gridName, setDefault) {
	// BEGIN USER CODE
	let filters = [];

	for (let i = 0; i < params.length; i++) {
		let filterOjbect = {
			caption: params[i].get("Caption"),
			type: params[i].get("InputType"),
			value: params[i].get("Value")
		}
		if (filterOjbect.type === "multiselect") {
			filterOjbect.value = [filterOjbect.value];
			let existingFilter = filters.find(e => e.caption == filterOjbect.caption);
			if (existingFilter) existingFilter.value.push(filterOjbect.value[0])
			else filters.push(filterOjbect);
		}
		else filters.push(filterOjbect);
	}
	const x = new OpenPrefiltered();
	x.prefilter(filters, gridName, setDefault);
	// END USER CODE
}
